@using Microsoft.AspNetCore.Mvc.TagHelpers
@model CartIndexViewModel

<h2>Your Cart</h2>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Item</th>
            <th>Quantity</th>
            <th class="text-right">Price</th>
            <th class="text-right">Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach(var item in Model.Cart.Items)
        {
            <tr>
                <td class="text-left">@item.Product.Name</td>
                <td class="text-left">
                    <input type="number" value="@item.Quantity" onchange="updateQuantity(@item.Quantity)"
                           asp-action="UpdateQuantity" asp-controller="Cart" asp-route-id="@item.Product.Id"
                           id="quantity-input"
                    />
                </td>
                <td class="text-right">@item.Product.Price.ToString("#,# VND")</td>
                <td class="text-right">@((item.Product.Price * item.Quantity).ToString("#,# VND") )</td>
                <td class="text-center">
                    <a class="btn btn-danger" asp-controller="cart" asp-action="RemoveFromCart" asp-route-id="@item.Product.Id">Remove</a>
                </td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-right">Total:</td>
            <td class="text-right">@Model.Cart.ComputeTotalValue().ToString("#,# VND")</td>
        </tr>
    </tfoot>
</table>
<a asp-controller="Cart" asp-action="Clear" class="btn btn-outline-primary">Clear</a>
<a style="margin-left: 1rem" asp-controller="Shopping" asp-action="List" class="btn btn-outline-primary">Back to shop</a>
<a style="margin-left: 1rem" asp-controller="Order" asp-action="Checkout" class="btn btn-outline-primary">Checkout</a>

@{
    int OnChangeQuantity(int productId)
    {
        var quantity = 1;
        if (quantity > 0)
        {
            // var cart = HttpContext.Session.GetJson<Cart>("cart") ?? new Cart();
            // cart.SetQuantity(productId, quantity);
            // HttpContext.Session.SetJson("cart", cart);
        }
        return 1;
    }
    void UpdateQuantity(int productId, int quantity)
    {
        if (quantity > 0)
        {
            // var cart = HttpContext.Session.GetJson<Cart>("cart") ?? new Cart();
            // cart.SetQuantity(productId, quantity);
            // HttpContext.Session.SetJson("cart", cart);
        }
    }
    
}

@section Scripts
{
    <script type="text/javascript">
         document.addEventListener("DOMContentLoaded", function () {
            var button = document.getElementById('button');
            button.addEventListener('click', function () {
                var test = "@OnChangeQuantity(1)";
                console.log(test);
             });
         });
         
         function updateQuantity(productId) {
            let input = document.getElementById('quantity-input');
            let quantity = input.value;
            console.log(quantity);
            console.log("productId: ", productId);
            
            @* @UpdateQuantity(productId, quantity); *@
        }
    </script>
}
